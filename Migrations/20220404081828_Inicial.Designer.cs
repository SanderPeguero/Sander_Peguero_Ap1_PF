// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ProyectoFinal.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20220404081828_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Descripcion = "El dispositivo no enciende sin estar conectado al cargador",
                            Nombre = "Bateria"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Descripcion = "El dispositivo no muestra nada en pantalla pero suena y da algunas respuestas a la interaccion",
                            Nombre = "Pantalla"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Descripcion = "El dispositivo no ha sufrido daños fisicos, la bateria y la pantalla funcionan al intercambiarla con un dispositivo de prueba",
                            Nombre = "Tarjeta Madre"
                        },
                        new
                        {
                            CategoriaId = 4,
                            Descripcion = "El dispositivo no carga, la bateria se muestra en buen estado al intercambiarla con un dispositivo de prueba",
                            Nombre = "Pin de Carga"
                        });
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Dispositivo", b =>
                {
                    b.Property<int>("DispositivoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("IMEI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Marca")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modelo")
                        .HasColumnType("TEXT");

                    b.Property<string>("SO")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Teclado")
                        .HasColumnType("INTEGER");

                    b.HasKey("DispositivoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Dispositivo");
                });

            modelBuilder.Entity("Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int>("Precio")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductoId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Descripcion = "El tecnico retira la bateria vieja y la cambia por una nueva",
                            Nombre = "Cambio de Bateria",
                            Precio = 400
                        },
                        new
                        {
                            ProductoId = 2,
                            Descripcion = "El tecnico retira la bateria vieja y la cambia por otra",
                            Nombre = "Cambio de Pantalla",
                            Precio = 800
                        },
                        new
                        {
                            ProductoId = 3,
                            Descripcion = "El tecnico retira la bateria vieja y la cambia por otra",
                            Nombre = "Cambio de Tarjeta Madre",
                            Precio = 1200
                        },
                        new
                        {
                            ProductoId = 4,
                            Descripcion = "El tecnico retira la bateria vieja y la cambia por otro",
                            Nombre = "Cambio de Pin de Carga",
                            Precio = 1600
                        });
                });

            modelBuilder.Entity("Recepcion", b =>
                {
                    b.Property<int>("RecepcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tecnico")
                        .HasColumnType("TEXT");

                    b.HasKey("RecepcionId");

                    b.ToTable("Recepciones");
                });

            modelBuilder.Entity("RecepcionDetalle", b =>
                {
                    b.Property<int>("RecepcionDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalle")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecepcionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecepcionDetalleId");

                    b.HasIndex("RecepcionId");

                    b.ToTable("RecepcionDetalle");
                });

            modelBuilder.Entity("Dispositivo", b =>
                {
                    b.HasOne("Cliente", null)
                        .WithMany("Dispositivos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecepcionDetalle", b =>
                {
                    b.HasOne("Recepcion", null)
                        .WithMany("Problemas")
                        .HasForeignKey("RecepcionId");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Dispositivos");
                });

            modelBuilder.Entity("Recepcion", b =>
                {
                    b.Navigation("Problemas");
                });
#pragma warning restore 612, 618
        }
    }
}
